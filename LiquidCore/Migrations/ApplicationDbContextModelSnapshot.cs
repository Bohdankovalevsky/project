// <auto-generated />
using System;
using LiquidWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LiquidCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LiquidCore.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
<<<<<<< HEAD
                            Id = "37126736-684c-4014-8908-5e3365be2531",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "566a78ca-03b0-4d8f-b5a1-8125ea69050d",
=======
                            Id = "8e1d5b80-f4bf-41f2-b710-b276c432276f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94f398a4-8348-4826-9b6a-1f9aec2a524d",
>>>>>>> Repos
                            Email = "admin@liquid.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "admin@liquid.com",
<<<<<<< HEAD
                            PasswordHash = "AQAAAAEAACcQAAAAEJ+DsiqQqGPVlSZnFoj8wCz7q2sULK/RDu+WUihy6Qi9BsO0eeCbqY6ymd7yU4Anuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "40556fa4-241c-43f8-b12b-ada88472028d",
=======
                            PasswordHash = "AQAAAAEAACcQAAAAEEg3dAatZK70ApzblSmsHCNi2Da/W7SYCChgDPRqpXeRVZfv04s/lhhwWpek62Zx+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7736a408-4384-4562-bbea-de351f4bdeeb",
>>>>>>> Repos
                            TwoFactorEnabled = false,
                            UserName = "admin@liquid.com"
                        },
                        new
                        {
<<<<<<< HEAD
                            Id = "f340ff39-2f94-4c45-93a7-63e645f590ce",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88968042-2858-4498-b920-a43f8d6e20da",
=======
                            Id = "340cff4c-5628-446d-902b-5f07ef3d2de8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "600f6d52-ef7f-4a58-8d90-3119c9d3b012",
>>>>>>> Repos
                            Email = "user@liquid.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "user@liquid.com",
<<<<<<< HEAD
                            PasswordHash = "AQAAAAEAACcQAAAAEDNgfLeI0zvDPXNvI3dQsi9hGsh8ahDooDxrveL7GyHQs7M0+kZDs+m1YQRS6a00IQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c59e259-5ba3-480f-aaec-418a388e1ddc",
=======
                            PasswordHash = "AQAAAAEAACcQAAAAEJfCgg0BzJuJQOEEkkiBfKt/mKyasQsTy32X2wopM4uEWi4KALKSi8hEs4af5lMc4g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9b9fa0a0-2493-44bf-abdd-527e5eef6c84",
>>>>>>> Repos
                            TwoFactorEnabled = false,
                            UserName = "user@liquid.com"
                        });
                });

            modelBuilder.Entity("LiquidCore.Capacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Ml")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Capacity");
                });

            modelBuilder.Entity("LiquidCore.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("LiquidCore.LiquidINfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("capacityId")
                        .HasColumnType("int");

                    b.Property<int?>("companyId")
                        .HasColumnType("int");

                    b.Property<int?>("nicotineId")
                        .HasColumnType("int");

                    b.Property<string>("taste")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("vGPGId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("capacityId");

                    b.HasIndex("companyId");

                    b.HasIndex("nicotineId");

                    b.HasIndex("vGPGId");

                    b.ToTable("LInfo");
                });

            modelBuilder.Entity("LiquidCore.Nicotine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Mg")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Nicotine");
                });

            modelBuilder.Entity("LiquidCore.VGPG", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("VgPg")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VGPG");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
<<<<<<< HEAD
                            Id = "eb2ddc88-e495-43bc-b87b-ac607b398520",
                            ConcurrencyStamp = "eb2ddc88-e495-43bc-b87b-ac607b398520",
=======
                            Id = "8ae09bb8-756f-405e-a54c-d5bedb2c9387",
                            ConcurrencyStamp = "8ae09bb8-756f-405e-a54c-d5bedb2c9387",
>>>>>>> Repos
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
<<<<<<< HEAD
                            Id = "19a82de3-6cc1-4eea-bb1a-856f2f7c5194",
                            ConcurrencyStamp = "eb2ddc88-e495-43bc-b87b-ac607b398520",
=======
                            Id = "630da828-3531-4023-a65b-72cb47a587e8",
                            ConcurrencyStamp = "8ae09bb8-756f-405e-a54c-d5bedb2c9387",
>>>>>>> Repos
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
<<<<<<< HEAD
                            UserId = "f340ff39-2f94-4c45-93a7-63e645f590ce",
                            RoleId = "19a82de3-6cc1-4eea-bb1a-856f2f7c5194"
                        },
                        new
                        {
                            UserId = "37126736-684c-4014-8908-5e3365be2531",
                            RoleId = "eb2ddc88-e495-43bc-b87b-ac607b398520"
=======
                            UserId = "340cff4c-5628-446d-902b-5f07ef3d2de8",
                            RoleId = "630da828-3531-4023-a65b-72cb47a587e8"
                        },
                        new
                        {
                            UserId = "8e1d5b80-f4bf-41f2-b710-b276c432276f",
                            RoleId = "8ae09bb8-756f-405e-a54c-d5bedb2c9387"
                        },
                        new
                        {
                            UserId = "8e1d5b80-f4bf-41f2-b710-b276c432276f",
                            RoleId = "630da828-3531-4023-a65b-72cb47a587e8"
>>>>>>> Repos
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LiquidCore.LiquidINfo", b =>
                {
                    b.HasOne("LiquidCore.Capacity", "capacity")
                        .WithMany()
                        .HasForeignKey("capacityId");

                    b.HasOne("LiquidCore.Company", "company")
                        .WithMany()
                        .HasForeignKey("companyId");

                    b.HasOne("LiquidCore.Nicotine", "nicotine")
                        .WithMany()
                        .HasForeignKey("nicotineId");

                    b.HasOne("LiquidCore.VGPG", "vGPG")
                        .WithMany()
                        .HasForeignKey("vGPGId");

                    b.Navigation("capacity");

                    b.Navigation("company");

                    b.Navigation("nicotine");

                    b.Navigation("vGPG");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LiquidCore.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LiquidCore.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiquidCore.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LiquidCore.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
